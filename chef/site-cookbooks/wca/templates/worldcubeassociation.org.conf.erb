upstream app {
<% if @rails_env == "development" %>
  server localhost:3000;
  # Backup in case we try to run in production mode on a dev server
  server unix:/tmp/unicorn.wca.sock fail_timeout=0 backup;
<% else %>
  # Path to Unicorn SOCK file
  server unix:/tmp/unicorn.wca.sock fail_timeout=0;
<% end %>
}

server {
  server_name <%= @server_name %> localhost;

<% if @https %>
  listen 443 ssl;
  include wca_https.conf;
<% else %>
  listen 80;
<% end %>

  # Deny access to dotfiles and dotfolders.
  location ~ /\. {
    deny all;
  }

  # Redirect 401 to log in page
  # Unfortunately, I don't think there's any way to redirect back after the
  # user logs in.
  error_page 401 = @error401;
    location @error401 {
    return 302 /users/sign_in;
  }

  location /api/v0/auth/results {
    proxy_pass http://app;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
  }

  #### Legacy PHP code
  location /results {
    alias <%= @repo_root %>/webroot/results;
    index index.php index.html;

    include fcgi.conf;

    location ^~ /results/admin {
      # Delegate to rails to determine if the client is authorized to administer
      # results. This is kind of painful, as it results in an extra request for every
      # single request, but this way we can avoid editing the existing PHP code.
      auth_request /api/v0/auth/results;

      include fcgi.conf;
      # Some of our administration scripts take entirely too long to run. Bump
      # the timeout to 10 minutes.
      fastcgi_read_timeout 10m;
    }

    location ^~ /results/statistics.php {
      include fcgi.conf;
      # /results/statistics.php?update8392=1 can take a while, and isn't covered
      # by the 10m timeout in /results/admin above. See
      # https://groups.google.com/d/msg/wca-software/qB1XYfpQCfs/QFyvx6_W_TwJ
      fastcgi_read_timeout 10m;
    }

    # As recommended by http://docs.phpmyadmin.net/en/latest/setup.html#using-setup-script,
    # prevent access to /libraries and /setup/lib.
    location ^~ /results/admin/phpMyAdmin/libraries {
      deny all;
    }
    location ^~ /results/admin/phpMyAdmin/setup/lib {
      deny all;
    }

    location ^~ /results/includes {
      deny all;
    }

    location ^~ /results/generated {
      deny all;
    }
  }

  #### phpBB forum
  location /forum {
    alias <%= @repo_root %>/webroot/forum;
    index index.php index.html;

    # From http://nginxlibrary.com/phpbb-configuration/
    location ~ /(config\.php|common\.php|cache|files|images/avatars/upload|includes|store) {
      deny all;
      return 403;
    }

    location ~* \.(gif|jpe?g|png|css)$ {
      expires 30d;
    }

    include fcgi.conf;
  }

  #### Regulations
  location /regulations {
    index index.html;
    alias <%= @repo_root %>/webroot/regulations;
  }

  #### New rails sytem
  # From http://unicorn.bogomips.org/examples/nginx.conf
  # path for static files
  root <%= @rails_root %>/public;

<% if @rails_env != "development" %>
  # http://vladigleba.com/blog/2014/03/27/deploying-rails-apps-part-4-configuring-nginx/
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }
<% end %>
  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;
    proxy_pass http://app;
  }
  # Rails error pages
  error_page 500 502 503 504 /500.html;
  client_max_body_size 64M;
  keepalive_timeout 10;
}

<% if @https %>
server {
  listen 80;
  server_name <%= @server_name %> localhost;

  return 301 https://$server_name$request_uri;
}
<% if @server_name.start_with? "www." %>
# Redirect naked domain HTTPS traffic to HTTPS on www....
server {
  server_name <%= @server_name.sub(/^www./, '') %>;

  listen 443 ssl;
  include wca_https.conf;

  return 301 https://www.$server_name$request_uri;
}
<% end %>
<% end %>

<% if @server_name.start_with? "www." %>
# Redirect naked domain HTTP traffic to HTTP(S) on www....
server {
  server_name <%= @server_name.sub(/^www./, '') %>;

  listen 80;

<% if @https %>
  return 301 https://www.$server_name$request_uri;
<% else %>
  return 301 http://www.$server_name$request_uri;
<% end %>
}
<% end %>
